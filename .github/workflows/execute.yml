name: Execute with dynamic parallel matrix

on:
  workflow_call:
    inputs:
      dir:
        required: true
        type: string
      EXTRA_ARGS:
        default: ''
        required: false
        type: string

jobs:
  setup:
    permissions:
      packages: write
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      hash: ${{ steps.img.outputs.hash }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
    - name: Read Julia version
      uses: SebRollen/toml-action@v1.0.2
      id: read_toml
      with:
        file: 'docs/${{ inputs.dir }}/Manifest.toml'
        field: 'julia_version'
    - name: Login to ghcr.io
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner	}}
        password: ${{ github.token }}
    - name: Get docker image hash
      id: img
      working-directory: docs/${{ inputs.dir }}
      run: echo "hash=${{ hashFiles(format('docs/{0}/requirements.txt', inputs.dir), format('docs/{0}/Manifest.toml', inputs.dir)) }}" >> "$GITHUB_OUTPUT"
    - name: Build Docker container
      env:
        IMG: ghcr.io/${{ github.repository }}:${{ steps.img.outputs.hash }}
      run: |
        docker manifest inspect ${IMG} && exit 0
        docker build --build-arg JLVER=${{ steps.read_toml.outputs.value }} -f env.Dockerfile -t ${IMG} docs/${{ inputs.dir }}
        docker push ${IMG}
    - name: List notebooks as a JSON array
      id: set-matrix
      working-directory: docs/${{ inputs.dir }}
      run: echo "matrix=$(python -c 'import glob, json; print(json.dumps(glob.glob("**/*.ipynb", recursive=True)))')" >> "$GITHUB_OUTPUT"

  execute:
    needs: setup
    strategy:
      max-parallel: 10
      fail-fast: false
      matrix:
        # Notebooks need to be executed
        notebook: ${{ fromJSON(needs.setup.outputs.matrix) }}
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
      - name: Restore notebook if present
        uses: actions/cache/restore@v4
        id: nb-cache
        with:
          path: docs/${{ inputs.dir }}/${{ matrix.notebook }}
          key: ${{ runner.os }}-notebook-${{ hashFiles(format('docs/{0}/{1}', inputs.dir, matrix.notebook)) }}-${{ needs.setup.outputs.hash }}
      - name: Pull docker image
        if: ${{ steps.nb-cache.outputs.cache-hit != 'true' }}
        run: docker pull ghcr.io/${{ github.repository }}:${{ needs.setup.outputs.hash }}
      - name: Execute Notebook
        if: ${{ steps.nb-cache.outputs.cache-hit != 'true' }}
        run: >
          docker run --rm -w /tmp -v ${{ github.workspace }}:/tmp
          -e EXTRA_ARGS=${{ inputs.EXTRA_ARGS }}
          -e TIMEOUT=-1
          -e NOTEBOOK=${{ inputs.dir }}/${{ matrix.notebook }}
          ghcr.io/${{ github.repository }}:${{ needs.setup.outputs.hash }}
          bash ./execute.sh
      - name: Cache notebook
        uses: actions/cache/save@v4
        if: ${{ steps.nb-cache.outputs.cache-hit != 'true' }}
        with:
          path: docs/${{ inputs.dir }}/${{ matrix.notebook }}
          key: ${{ steps.nb-cache.outputs.cache-primary-key }}
      - name: Convert artifact Name
        id: art
        run: echo "name=$(echo ${{ inputs.dir }}/${{ matrix.notebook }} | sed 's/\//-/g')" >> "$GITHUB_OUTPUT"
      - name: Upload Notebook
        uses: actions/upload-artifact@v4
        with:
          name: notebook-${{ steps.art.outputs.name }}
          path: docs*/${{ inputs.dir }}/${{ matrix.notebook }}  # keep folder structure
          retention-days: 1
