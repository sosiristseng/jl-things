name: Execute with dynamic parallel matrix

on:
  workflow_call:
    inputs:
      dir:
        required: true
        type: string

jobs:
  setup:
    permissions:
      packages: write
    runs-on: ubuntu-latest
    outputs:
      matrix: ${{ steps.set-matrix.outputs.matrix }}
      hash: ${{ steps.img.outputs.hash }}
    steps:
    - name: Checkout repository
      uses: actions/checkout@v4
      with:
        sparse-checkout: |
          .github
          docs/${{ inputs.dir }}
    - name: Login to ghcr.io
      uses: docker/login-action@v3
      with:
        registry: ghcr.io
        username: ${{ github.repository_owner	}}
        password: ${{ github.token }}
    - name: Get docker image hash
      id: img
      run: echo "hash=${{ hashFiles('**/Manifest.toml', 'env.Dockerfile') }}" >> "$GITHUB_OUTPUT"
    - name: Build Docker container
      env:
        IMG: ghcr.io/${{ github.repository }}:${{ steps.img.outputs.hash }}
      run: |
        docker manifest inspect ${IMG} && exit 0
        docker build -f env.Dockerfile -t ${IMG} docs/${{ inputs.dir }}
        docker push ${IMG}
    - name: List notebooks as a JSON array
      id: set-matrix
      working-directory: docs/${{ inputs.dir }}
      run: echo "matrix=$(python -c 'import glob, json, os; print(json.dumps(glob.glob("**/*.jl", recursive=True)))')" >> "$GITHUB_OUTPUT"

  execute:
    needs: setup
    strategy:
      max-parallel: 10
      fail-fast: false
      matrix:
        # Notebooks need to be executed
        notebook: ${{ fromJSON(needs.setup.outputs.matrix) }}
    runs-on: ubuntu-latest
    env:
      IMG: ghcr.io/${{ github.repository }}:${{ needs.setup.outputs.hash }}
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          sparse-checkout: |
            .github
            docs/${{ inputs.dir }}
      - name: Cache built notebook
        uses: actions/cache@v4
        id: nb-cache
        with:
          path: docs/${{ inputs.dir }}/**/*.ipynb
          key: ${{ runner.os }}-notebook-${{ hashFiles(format('docs/{0}/{1}', inputs.dir, matrix.notebook)) }}-${{ needs.setup.outputs.hash }}
      - name: Execute Notebook
        if: ${{ steps.nb-cache.outputs.cache-hit != 'true' }}
        run: >
          docker run --rm -w /tmp -v ${{ github.workspace }}:/tmp
          ${{ env.IMG }}
          julia --project=docs/${{ inputs.dir }} --color=yes -- build.jl docs/${{ inputs.dir }}/${{ matrix.notebook }}
      - name: Convert artifact Name
        id: art
        run: echo "name=$(echo ${{ inputs.dir }}/${{ matrix.notebook }} | sed 's/\//-/g')" >> "$GITHUB_OUTPUT"
      - name: Upload Notebook
        uses: actions/upload-artifact@v4
        with:
          name: notebook-${{ steps.art.outputs.name }}
          path: docs*/${{ inputs.dir }}/**/*.ipynb  # keep folder structure
          retention-days: 1
